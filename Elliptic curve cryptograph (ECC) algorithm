import os
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

# Function to encrypt a message
def encrypt_message(public_key, message):
    # Generate a shared secret using ECDH
    shared_secret = private_key.exchange(ec.ECDH(), public_key)

    # Derive a symmetric key from the shared secret
    salt = os.urandom(16)  # Generate a random salt
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    symmetric_key = kdf.derive(shared_secret)

    # Encrypt the message using AES
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(symmetric_key), modes.CFB(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    ciphertext = iv + encryptor.update(message) + encryptor.finalize()  # Prepend IV

    # Prepend salt to the ciphertext
    return salt + ciphertext

# Function to decrypt a message
def decrypt_message(private_key, ciphertext):
    # Extract the salt and IV from the ciphertext
    salt = ciphertext[:16]
    iv = ciphertext[16:32]
    actual_ciphertext = ciphertext[32:]

    # Generate a shared secret using ECDH
    shared_secret = private_key.exchange(ec.ECDH(), public_key)

    # Derive the symmetric key from the shared secret using the same salt
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    symmetric_key = kdf.derive(shared_secret)

    # Decrypt the message using AES
    cipher = Cipher(algorithms.AES(symmetric_key), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    plaintext = decryptor.update(actual_ciphertext) + decryptor.finalize()
    return plaintext

# Encrypt the message
ciphertext = encrypt_message(public_key, message)

# Decrypt the message
plaintext = decrypt_message(private_key, ciphertext)

# Display the original message
print(plaintext.decode())
